---
import Menu from "@icons/Menu.astro";
import Sun from "@icons/Sun.astro";
import Moon from "@icons/Moon.astro";
const { siteConfig } = Astro.props as { siteConfig: import('../../../_shared/config').PortfolioSiteConfig };

const navLinks = [
  { text: 'About', href: '#about' },
  { text: 'Projects', href: '#projects' },
  { text: 'Experience', href: '#experience' },
];
---

<header
  class="sticky top-0 z-50 mx-auto flex max-w-5xl animate-slide-in justify-between bg-[var(--bg-elevated)] px-5 py-6 pr-12 sm:pr-14 relative"
>
  <a href="#hero" aria-label="Home link" class="text-[var(--text)] font-semibold">
    {siteConfig?.name}
  </a>

  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-[var(--text-muted)] sm:hidden mr-12"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="absolute top-20 right-5 hidden rounded-xl border border-[var(--border)] bg-[var(--bg-elevated)] px-4 py-5 text-[var(--text-muted)] sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`nav-item relative block p-2 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['â€¢'] hover:text-[var(--text)]`}
              href={link.href}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>

  <!-- Theme toggle (top-right) -->
  <button
    id="theme-toggle"
    type="button"
    aria-label="Toggle color theme"
    class="absolute right-5 top-1/2 -translate-y-1/2 inline-flex h-9 w-9 items-center justify-center rounded-full border border-[var(--border)] text-[var(--text-muted)] hover:text-[var(--text)] hover:border-primary"
  >
    <Sun />
    <Moon />
  </button>
</header>

<script is:inline>
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Update navigation based on scroll position with Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("href") === `#${entry.target.id}`) {
              item.classList.add("text-[var(--text)]", "md:after:opacity-100");
            } else {
              item.classList.remove("text-[var(--text)]", "md:after:opacity-100");
            }
          });
        }
      });
    },
    { threshold: 0.5 },
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => {
        observer.observe(section);
      });
    }
  };

  // Theme toggling
  const themeBtn = document.querySelector('#theme-toggle');
  const toggleTheme = () => {
    const html = document.documentElement;
    const next = html.dataset.theme === 'light' ? 'dark' : 'light';
    html.dataset.theme = next;
    try { localStorage.setItem('theme', next); } catch (e) {}
  };
  themeBtn?.addEventListener('click', toggleTheme);
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>
